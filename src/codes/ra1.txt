best-paths = []
maxC = the truck's max capacity

function solve(G, P, m, C)
  maxC = C
  G'.V = vertices from P.a $\cup$ P.b
  for each different pair(x, y) from G'.V
    if y is reachable from x in graph G then
      G'.E add edge(x, y)
      G'.W(edge(x, y)) = length of shortest path from x to y
  back-track-best-path(G', P, st, [], [], m-1, maxC)
  return best-paths

function drop-off-remaining-items(G, P, st, path)
  final-path = path
  while stack st is not empty then
    pop (b, c) from st
    append b to final-path
  return final-path

function back-track-best-path(G, P, st, path, paths, m, C)
  if P is empty then
    path = drop-off-remaining-items(G, P, st, path)
    append path to paths
    if sum of all edge weights in paths less than best-paths then
      best-paths = paths
    return
  
  // Scenario for changing to new truck
  if m > 0 and length of path > 0 then
    path = drop-off-remaining-items(G, P, st, path)
    append path to paths
    back-track-best-path(G, P, st, [], paths, m-1, maxC)
    pop the last path in the paths

  // Scenario for pickup new order
  for each (a, b, w) in P
    if w >= C then
      P = P - {(a, b, c)}
      push (b, c) to st
      append a to path
      back-track-best-path(G, P, st, path, paths, m, C-c)
      remove last vertex from path
      pop (b, c) from st
      P = P + {(a, b, c)}

  // Scenario for drop-off the item in truck
  if stack st is not empty then
    (b, c) = pop from st
    append b to path
    back-track-best-path(G, P, st, path, paths, m, C+c)
    remove last vertex from path
    push (b, c) to st